// private ArrayList<String> dateFormatPresets, dateHeaderList, amountHeaderList, descriptionHeaderList;
// private ObservableList<String> dateHeaderComboBoxList, amountHeaderComboBoxList, descriptionHeaderComboBoxList;

// File chooser label components
// private FileChooser fileChooser;
// private File previewFile;
// private final String SELECTEER_OF_SLEEP = "Selecteer of sleep bestand";

/*
* The following is code for if I want to turn the headername fields into combo boxes that have a list of potential headers taken from a preview file.
*/
// Initialize header names combo boxes
// ArrayList<String> dateHeaderList = new ArrayList<>();
// ArrayList<String> amountHeaderList = new ArrayList<>();
// ArrayList<String> descriptionHeaderList = new ArrayList<>();

// Add items to arraylists...

// Add arraylists to observable lists
// date combo box
// dateHeaderComboBoxList = FXCollections.observableArrayList(dateHeaderList);
// dateHeaderNameComboBox.setItems(dateHeaderComboBoxList);
// amount combo box
// amountHeaderComboBoxList = FXCollections.observableArrayList(amountHeaderList);
// amountHeaderNameComboBox.setItems(amountHeaderComboBoxList);
// description combo box
// descriptionHeaderComboBoxList = FXCollections.observableArrayList(descriptionHeaderList);
// descriptionHeaderNameComboBox.setItems(descriptionHeaderComboBoxList);



/*
* Preview file handling logic
*/
// @FXML
// private void handleDragOver(DragEvent event) {
//     if (event.getGestureSource() == selectOrDropPreviewFileLabel && event.getDragboard().hasFiles()) {
//         selectOrDropPreviewFileLabel.setStyle("-fx-background-color: lightblue;");
//         event.acceptTransferModes(TransferMode.COPY);
//     }
//     event.consume();
// }

// @FXML
// private void handleDragExited(DragEvent event) {
//     selectOrDropPreviewFileLabel.setStyle("-fx-background-color: white;");
//     event.consume();
// }

// @FXML
// private void handleDragDropped(DragEvent event) {
//     Dragboard db = event.getDragboard();
//     boolean success = false;
//     if (db.hasFiles()) {
//         // Handle the dropped files
//         success = true;
// 		if (FileUtils.isLegalFileExtension(Files.getFileExtension(previewFile.getAbsolutePath()))) {
//             previewExcelFile(previewFile);
//         } else {
// 			selectOrDropPreviewFileLabel.setText(SELECTEER_OF_SLEEP);
// 		}
//     }
//     selectOrDropPreviewFileLabel.setStyle("-fx-background-color: white;");
//     event.setDropCompleted(success);
//     event.consume();
// }

// @FXML
// void handleSelectFile(MouseEvent event) throws IOException {
// 	if (event.getSource() == selectOrDropPreviewFileLabel) {
// 		previewFile = fileChooser.showOpenDialog(selectOrDropPreviewFileLabel.getScene().getWindow());
// 		selectOrDropPreviewFileLabel.setText(previewFile.getName());
// 		if (FileUtils.isLegalFileExtension(Files.getFileExtension(previewFile.getName()))) {
// 			// SHOW FILE PREVIEW IN TABLE VIEW
// 			previewExcelFile(previewFile);
// 		} else {
// 			selectOrDropPreviewFileLabel.setText(SELECTEER_OF_SLEEP);
// 		}
// 	}
// }


// private void populateHeaderIndices() {
// 	allHeaderIndices.put(amountHeader, amountColumn);
// 	allHeaderIndices.put(dateHeader, dateColumn);
// 	allHeaderIndices.put(descriptionHeader, descriptionColumn);
// 	if (hasSeparateCreditOrDebitColumn) {
// 		allHeaderIndices.put(debetCreditHeader, debetOrCreditColumn);
// 	}
// }


/*
* Reads the data of the selected file
* Populates the preview table view with the data
*/
private void previewExcelFile(File selectedFile) {
    
    TableView<ObservableList<String>> tableView = new TableView<>();
    
    try {
        FileInputStream fis = new FileInputStream(selectedFile);
        XSSFWorkbook workbook = new XSSFWorkbook(fis);
        XSSFSheet sheet = workbook.getSheetAt(0);

        // Create columns dynamically based on the Excel sheet
        Iterator<Cell> cellIterator = sheet.getRow(0).cellIterator();
        int colIndex = 0;
        while (cellIterator.hasNext()) {
            Cell cell = cellIterator.next();
            TableColumn<ObservableList<String>, String> column = new TableColumn<>(cell.toString());
            final int finalColIndex = colIndex;
            column.setCellValueFactory(param -> new ReadOnlyStringWrapper(param.getValue().get(finalColIndex)));
            tableView.getColumns().add(column);
            colIndex++;
        }

        // Populate data into TableView
        ObservableList<ObservableList<String>> data = FXCollections.observableArrayList();
        for (Row row : sheet) {
            ObservableList<String> rowData = FXCollections.observableArrayList();
            for (Cell cell : row) {
                rowData.add(cell.toString());
            }
            data.add(rowData);
        }

        tableView.setItems(data);

        // Close resources
        workbook.close();
        fis.close();

    } catch (Exception e) {
        e.printStackTrace();
    }
}


/*
* First transaction field
* Add a listener to the row with first transaction field
*/
@FXML
private void handleFirstTransactionRowField(KeyEvent event) {
    String newValue = firstTransactionRowField.getText();
    Tooltip headerRowFieldTooltip = new Tooltip("Alleen getallen toegestaan");
    if (!newValue.matches("\\d*")) {
        if (!headerRowFieldTooltip.isShowing()) {
            headerRowFieldTooltip.show(firstTransactionRowField,
                    firstTransactionRowField.localToScreen(firstTransactionRowField.getBoundsInLocal()).getMinX(),
                    firstTransactionRowField.localToScreen(firstTransactionRowField.getBoundsInLocal()).getMinY() - 30);
        }
        firstTransactionRowField.setText(newValue.replaceAll("[^\\d]", ""));
    } else if (!newValue.isEmpty()) {
        if (headerRowFieldTooltip.isShowing()) {
            headerRowFieldTooltip.hide();
        }
        firstTransactionRow = Integer.parseInt(newValue);
    } else if (headerRowFieldTooltip.isShowing()) {
        headerRowFieldTooltip.hide();
    }
}